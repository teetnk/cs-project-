import cv2
import numpy as np
import requests
import gspread
from datetime import datetime
from pyzbar.pyzbar import decode
from oauth2client.service_account import ServiceAccountCredentials

# --------------- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ Google Sheets API ---------------
SHEET_ID = "1xnIkpmWV7tH6qFnNIGMs1c9Uow_J3akA3jBWnJ9OlBY"  # ‚úÖ Google Sheets ID
SHEET_BARCODE = "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î"  # ‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î
SHEET_USERS = "UserIDs"  # ‚úÖ ‡∏ä‡∏∑‡πà‡∏≠‡∏ä‡∏µ‡∏ï‡∏ó‡∏µ‡πà‡πÉ‡∏ä‡πâ‡πÄ‡∏Å‡πá‡∏ö User ID ‡∏Ç‡∏≠‡∏á LINE
CREDENTIALS_FILE = "credentials.json"  # ‚úÖ ‡πÑ‡∏ü‡∏•‡πå JSON ‡∏à‡∏≤‡∏Å Google Cloud

# --------------- ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ LINE API ---------------
LINE_ACCESS_TOKEN = "wNdlBHSikSJc5tJGvPnwi0PZkuL9ZZM6PAmpjGjbeYS2jK56gZvlNBT6f68TPDy7g8PhHsXALvaSHPQ5WL7mMcslwgfl9K8wWQig3VzAe2NnyNhQqfLPh+Vk2jvbxWO0172DLU+ukr/ZTMSmVNpUMwdB04t89/1O/w1cDnyilFU="  # ‚úÖ ‡πÉ‡∏™‡πà LINE OA Access Token ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets
def connect_google_sheets(sheet_name):
    try:
        scope = ["https://spreadsheets.google.com/feeds", "https://www.googleapis.com/auth/spreadsheets",
                 "https://www.googleapis.com/auth/drive.file", "https://www.googleapis.com/auth/drive"]
        creds = ServiceAccountCredentials.from_json_keyfile_name(CREDENTIALS_FILE, scope)
        client = gspread.authorize(creds)
        return client.open_by_key(SHEET_ID).worksheet(sheet_name)
    except Exception as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets: {e}")
        return None

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏î‡∏∂‡∏á `User ID` ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏à‡∏≤‡∏Å Google Sheets
def get_all_user_ids():
    sheet = connect_google_sheets(SHEET_USERS)
    if not sheet:
        return []

    user_ids = sheet.col_values(1)  # ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå A ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡πá‡∏ö User ID
    return [user_id.strip() for user_id in user_ids if user_id.startswith("U")]

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏∏‡∏Å `User ID`
def send_line_message(message):
    user_ids = get_all_user_ids()
    if not user_ids:
        print("‚ùå ‡πÑ‡∏°‡πà‡∏°‡∏µ User ID ‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï UserIDs")
        return

    url = "https://api.line.me/v2/bot/message/multicast"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {LINE_ACCESS_TOKEN}"
    }
    payload = {
        "to": user_ids,  # ‚úÖ ‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏ô‡πÉ‡∏ô‡∏ä‡∏µ‡∏ï UserIDs
        "messages": [{"type": "text", "text": message}]
    }

    try:
        response = requests.post(url, headers=headers, json=payload)
        response.raise_for_status()  # ‚úÖ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
        print("üì§ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô LINE ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏ó‡∏∏‡∏Å User ID")
    except requests.exceptions.RequestException as e:
        print(f"‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° LINE: {e}")

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î
def preprocess_image(frame):
    gray = cv2.cvtColor(frame, cv2.COLOR_BGR2GRAY)
    return cv2.GaussianBlur(gray, (5, 5), 0)

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö 1D & 2D)
def read_barcodes(frame, sheet):
    processed_frame = preprocess_image(frame)
    barcodes = decode(processed_frame)

    if not barcodes:
        return frame

    existing_barcodes = set(sheet.col_values(2))  # ‚úÖ ‡∏î‡∏∂‡∏á Barcode ‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏•‡∏î‡πÇ‡∏´‡∏•‡∏î

    for barcode in barcodes:
        barcode_text = barcode.data.decode('utf-8')
        barcode_type = barcode.type
        x, y, w, h = barcode.rect

        if barcode_text in existing_barcodes:
            print(f"‚ö†Ô∏è ‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡∏ã‡πâ‡∏≥: {barcode_text}")
            continue  # ‚úÖ ‡∏Ç‡πâ‡∏≤‡∏°‡∏ñ‡πâ‡∏≤‡∏û‡∏ö‡∏ß‡πà‡∏≤‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏Ñ‡∏¢‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏•‡πâ‡∏ß

        print(f"‚úÖ ‡∏û‡∏ö {barcode_type}: {barcode_text}")

        # ‚úÖ ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏£‡∏≠‡∏ö‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î
        cv2.rectangle(frame, (x, y), (x+w, y+h), (0, 255, 0), 2)
        cv2.putText(frame, barcode_text, (x, y - 10), cv2.FONT_HERSHEY_SIMPLEX, 0.6, (0, 255, 0), 2)

        # ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏•‡∏á Google Sheets
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        sheet.append_row([timestamp, barcode_text, barcode_type])

        # ‚úÖ ‡πÅ‡∏à‡πâ‡∏á‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÑ‡∏õ‡∏ó‡∏µ‡πà LINE ‡∏ó‡∏∏‡∏Å User ID
        message = f"üì¢ ‡∏™‡πÅ‡∏Å‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!\nüîπ ‡∏£‡∏´‡∏±‡∏™: {barcode_text}\nüìÖ ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà: {timestamp.split()[0]}\n‚è∞ ‡πÄ‡∏ß‡∏•‡∏≤: {timestamp.split()[1]}\nüìå ‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó: {barcode_type}"
        send_line_message(message)

    return frame

# ‚úÖ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏õ‡∏¥‡∏î‡∏Å‡∏•‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πÅ‡∏Å‡∏ô
def main():
    camera = cv2.VideoCapture(0)
    camera.set(3, 640)  # ‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠
    camera.set(4, 480)  # ‚úÖ ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏≠‡∏á‡∏ß‡∏¥‡∏î‡∏µ‡πÇ‡∏≠

    sheet = connect_google_sheets(SHEET_BARCODE)
    if sheet is None:
        print("‚ùå ‡∏õ‡∏¥‡∏î‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡πÄ‡∏ô‡∏∑‡πà‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏ï‡πà‡∏≠ Google Sheets ‡πÑ‡∏î‡πâ")
        return

    while True:
        ret, frame = camera.read()
        if not ret:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏£‡∏±‡∏ö‡∏†‡∏≤‡∏û‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á")
            break

        frame = read_barcodes(frame, sheet)  # ‚úÖ ‡∏≠‡πà‡∏≤‡∏ô‡∏ö‡∏≤‡∏£‡πå‡πÇ‡∏Ñ‡πâ‡∏î‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
        cv2.imshow('üì∑ Barcode & QR Code Scanner', frame)

        if cv2.waitKey(1) & 0xFF == 27:  # ‚úÖ ‡∏Å‡∏î ESC ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°
            break

    camera.release()
    cv2.destroyAllWindows()

if __name__ == '__main__':
    main()
